openapi: 3.0.0
info:
  description: This API receives events from parking meters in downtown Vancouver
  version: 1.0.0
  title: Vancouver Parking Monitoring API
tags:
  - name: parking_meters
    description: Operations related to parking meters
paths:
  /parking:
    # post:
    #   tags:
    #     - parking_meters
    #   summary: Reports the status of a parking spot (free or occupied)
    #   operationId: app.parking_status
    #   description: Adds a new parking status event to the system
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/ParkingStatusEvent'
    #   responses:
    #     '201':
    #       description: Event created successfully
    #     '400':
    #       description: Invalid input, object invalid
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: Invalid input message
    #     '409':
    #       description: An existing event already exists
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: Event already exists
    get:
      description: Returns a list of parking status events
      operationId: app.get_parking_status
      parameters:
        - name: start_timestamp
          in: query
          description: Start of the timestamp range
          required: true
          schema:
            type: string
            format: date-time
            example: '2024-01-01T00:00:00Z'
        - name: end_timestamp
          in: query
          description: End of the timestamp range
          required: true
          schema:
            type: string
            format: date-time
            example: '2024-01-02T00:00:00Z'
        - name: timestamp
          in: query
          description: Specific timestamp for the parking event
          required: false
          schema:
            type: string
            format: date-time
            example: '2024-08-29T09:12:00Z'
      responses:
        '200':
          description: Successfully returned a list of parking status events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingStatusEvent'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid request message

  /payment:
    # post:
    #   tags:
    #     - parking_meters
    #   summary: Reports a payment for a parking spot
    #   operationId: app.payment
    #   description: Adds a new payment event to the system
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/PaymentEvent'
    #   responses:
    #     '201':
    #       description: Payment event created successfully
    #     '400':
    #       description: Invalid input, object invalid
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: Invalid input message
    #     '409':
    #       description: An existing payment event already exists
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: Payment event already exists
    get:
      description: Returns a list of payment events
      operationId: app.get_payment_events
      parameters:
        - name: start_timestamp
          in: query
          description: Start of the timestamp range
          required: true
          schema:
            type: string
            format: date-time
            example: '2024-01-01T00:00:00Z'
        - name: end_timestamp
          in: query
          description: End of the timestamp range
          required: true
          schema:
            type: string
            format: date-time
            example: '2024-01-02T00:00:00Z'
        - name: timestamp
          in: query
          description: Specific timestamp for the payment event
          required: false
          schema:
            type: string
            format: date-time
            example: '2024-08-29T12:09:33Z'
      responses:
        '200':
          description: Successfully returned a list of payment events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentEvent'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid request message

components:
  schemas:
    ParkingStatusEvent:
      type: object
      required:
        - meter_id
        - device_id
        - status
        - timestamp
        - spot_number
        - trace_id
      properties:
        meter_id:
          type: integer
          example: 240560
        device_id:
          type: string
          format: uuid
          description: Unique identifier of the meter or sensor
          example: d290f1ee-6c54-4b01-90e6-d701748f0851        
        status:
          type: boolean
          description: true = free, false = occupied
          example: true
        timestamp:
          type: string
          format: date-time
          example: '2024-08-29T09:12:00Z'
        spot_number:
          type: integer
          example: 25
        trace_id:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'

    PaymentEvent:
      required:
        - meter_id
        - device_id
        - amount
        - timestamp
        - duration
        - trace_id
      properties:
        meter_id:
          type: integer
          example: 12345
        device_id:
          type: string
          format: uuid
          description: Unique identifier of the meter or sensor
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        amount:
          type: number
          format: float
          example: 2.75
        timestamp:
          type: string
          format: date-time
          example: '2024-08-29T12:09:33Z'
        duration:
          type: integer
          description: Duration of parking in minutes
          example: 60
        trace_id:
          type: string
          example: '123e4567-e89b-12d3-a456-426614174000'